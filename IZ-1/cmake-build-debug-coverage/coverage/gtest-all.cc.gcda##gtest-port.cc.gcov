        -:    0:Source:/mnt/c/Users/xpewa/CLionProjects/Technopark-IZ/IZ-1/Google_tests/lib/googletest-master/googletest/src/gtest-port.cc
        -:    0:Graph:/mnt/c/Users/xpewa/CLionProjects/Technopark-IZ/IZ-1/cmake-build-debug-coverage/Google_tests/lib/googletest-master/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/mnt/c/Users/xpewa/CLionProjects/Technopark-IZ/IZ-1/cmake-build-debug-coverage/Google_tests/lib/googletest-master/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:
        -:   31:#include "gtest/internal/gtest-port.h"
        -:   32:
        -:   33:#include <limits.h>
        -:   34:#include <stdio.h>
        -:   35:#include <stdlib.h>
        -:   36:#include <string.h>
        -:   37:#include <cstdint>
        -:   38:#include <fstream>
        -:   39:#include <memory>
        -:   40:
        -:   41:#if GTEST_OS_WINDOWS
        -:   42:# include <windows.h>
        -:   43:# include <io.h>
        -:   44:# include <sys/stat.h>
        -:   45:# include <map>  // Used in ThreadLocal.
        -:   46:# ifdef _MSC_VER
        -:   47:#  include <crtdbg.h>
        -:   48:# endif  // _MSC_VER
        -:   49:#else
        -:   50:# include <unistd.h>
        -:   51:#endif  // GTEST_OS_WINDOWS
        -:   52:
        -:   53:#if GTEST_OS_MAC
        -:   54:# include <mach/mach_init.h>
        -:   55:# include <mach/task.h>
        -:   56:# include <mach/vm_map.h>
        -:   57:#endif  // GTEST_OS_MAC
        -:   58:
        -:   59:#if GTEST_OS_DRAGONFLY || GTEST_OS_FREEBSD || GTEST_OS_GNU_KFREEBSD || \
        -:   60:    GTEST_OS_NETBSD || GTEST_OS_OPENBSD
        -:   61:# include <sys/sysctl.h>
        -:   62:# if GTEST_OS_DRAGONFLY || GTEST_OS_FREEBSD || GTEST_OS_GNU_KFREEBSD
        -:   63:#  include <sys/user.h>
        -:   64:# endif
        -:   65:#endif
        -:   66:
        -:   67:#if GTEST_OS_QNX
        -:   68:# include <devctl.h>
        -:   69:# include <fcntl.h>
        -:   70:# include <sys/procfs.h>
        -:   71:#endif  // GTEST_OS_QNX
        -:   72:
        -:   73:#if GTEST_OS_AIX
        -:   74:# include <procinfo.h>
        -:   75:# include <sys/types.h>
        -:   76:#endif  // GTEST_OS_AIX
        -:   77:
        -:   78:#if GTEST_OS_FUCHSIA
        -:   79:# include <zircon/process.h>
        -:   80:# include <zircon/syscalls.h>
        -:   81:#endif  // GTEST_OS_FUCHSIA
        -:   82:
        -:   83:#include "gtest/gtest-spi.h"
        -:   84:#include "gtest/gtest-message.h"
        -:   85:#include "gtest/internal/gtest-internal.h"
        -:   86:#include "gtest/internal/gtest-string.h"
        -:   87:#include "src/gtest-internal-inl.h"
        -:   88:
        -:   89:namespace testing {
        -:   90:namespace internal {
        -:   91:
        -:   92:#if defined(_MSC_VER) || defined(__BORLANDC__)
        -:   93:// MSVC and C++Builder do not provide a definition of STDERR_FILENO.
        -:   94:const int kStdOutFileno = 1;
        -:   95:const int kStdErrFileno = 2;
        -:   96:#else
        -:   97:const int kStdOutFileno = STDOUT_FILENO;
        -:   98:const int kStdErrFileno = STDERR_FILENO;
        -:   99:#endif  // _MSC_VER
        -:  100:
        -:  101:#if GTEST_OS_LINUX
        -:  102:
        -:  103:namespace {
        -:  104:template <typename T>
    #####:  105:T ReadProcFileField(const std::string& filename, int field) {
    #####:  106:  std::string dummy;
    %%%%%:  106-block  0
    $$$$$:  106-block  1
    #####:  107:  std::ifstream file(filename.c_str());
    $$$$$:  107-block  0
    #####:  108:  while (field-- > 0) {
    %%%%%:  108-block  0
    %%%%%:  108-block  1
    #####:  109:    file >> dummy;
    %%%%%:  109-block  0
        -:  110:  }
    #####:  111:  T output = 0;
    #####:  112:  file >> output;
    %%%%%:  112-block  0
    #####:  113:  return output;
    %%%%%:  113-block  0
    %%%%%:  113-block  1
        -:  114:}
        -:  115:}  // namespace
        -:  116:
        -:  117:// Returns the number of active threads, or 0 when there is an error.
    #####:  118:size_t GetThreadCount() {
        -:  119:  const std::string filename =
    #####:  120:      (Message() << "/proc/" << getpid() << "/stat").GetString();
    %%%%%:  120-block  0
    %%%%%:  120-block  1
    %%%%%:  120-block  2
    %%%%%:  120-block  3
    %%%%%:  120-block  4
    %%%%%:  120-block  5
    %%%%%:  120-block  6
    $$$$$:  120-block  7
    $$$$$:  120-block  8
    $$$$$:  120-block  9
    #####:  121:  return ReadProcFileField<size_t>(filename, 19);
    %%%%%:  121-block  0
    %%%%%:  121-block  1
        -:  122:}
        -:  123:
        -:  124:#elif GTEST_OS_MAC
        -:  125:
        -:  126:size_t GetThreadCount() {
        -:  127:  const task_t task = mach_task_self();
        -:  128:  mach_msg_type_number_t thread_count;
        -:  129:  thread_act_array_t thread_list;
        -:  130:  const kern_return_t status = task_threads(task, &thread_list, &thread_count);
        -:  131:  if (status == KERN_SUCCESS) {
        -:  132:    // task_threads allocates resources in thread_list and we need to free them
        -:  133:    // to avoid leaks.
        -:  134:    vm_deallocate(task,
        -:  135:                  reinterpret_cast<vm_address_t>(thread_list),
        -:  136:                  sizeof(thread_t) * thread_count);
        -:  137:    return static_cast<size_t>(thread_count);
        -:  138:  } else {
        -:  139:    return 0;
        -:  140:  }
        -:  141:}
        -:  142:
        -:  143:#elif GTEST_OS_DRAGONFLY || GTEST_OS_FREEBSD || GTEST_OS_GNU_KFREEBSD || \
        -:  144:      GTEST_OS_NETBSD
        -:  145:
        -:  146:#if GTEST_OS_NETBSD
        -:  147:#undef KERN_PROC
        -:  148:#define KERN_PROC KERN_PROC2
        -:  149:#define kinfo_proc kinfo_proc2
        -:  150:#endif
        -:  151:
        -:  152:#if GTEST_OS_DRAGONFLY
        -:  153:#define KP_NLWP(kp) (kp.kp_nthreads)
        -:  154:#elif GTEST_OS_FREEBSD || GTEST_OS_GNU_KFREEBSD
        -:  155:#define KP_NLWP(kp) (kp.ki_numthreads)
        -:  156:#elif GTEST_OS_NETBSD
        -:  157:#define KP_NLWP(kp) (kp.p_nlwps)
        -:  158:#endif
        -:  159:
        -:  160:// Returns the number of threads running in the process, or 0 to indicate that
        -:  161:// we cannot detect it.
        -:  162:size_t GetThreadCount() {
        -:  163:  int mib[] = {
        -:  164:    CTL_KERN,
        -:  165:    KERN_PROC,
        -:  166:    KERN_PROC_PID,
        -:  167:    getpid(),
        -:  168:#if GTEST_OS_NETBSD
        -:  169:    sizeof(struct kinfo_proc),
        -:  170:    1,
        -:  171:#endif
        -:  172:  };
        -:  173:  u_int miblen = sizeof(mib) / sizeof(mib[0]);
        -:  174:  struct kinfo_proc info;
        -:  175:  size_t size = sizeof(info);
        -:  176:  if (sysctl(mib, miblen, &info, &size, NULL, 0)) {
        -:  177:    return 0;
        -:  178:  }
        -:  179:  return static_cast<size_t>(KP_NLWP(info));
        -:  180:}
        -:  181:#elif GTEST_OS_OPENBSD
        -:  182:
        -:  183:// Returns the number of threads running in the process, or 0 to indicate that
        -:  184:// we cannot detect it.
        -:  185:size_t GetThreadCount() {
        -:  186:  int mib[] = {
        -:  187:    CTL_KERN,
        -:  188:    KERN_PROC,
        -:  189:    KERN_PROC_PID | KERN_PROC_SHOW_THREADS,
        -:  190:    getpid(),
        -:  191:    sizeof(struct kinfo_proc),
        -:  192:    0,
        -:  193:  };
        -:  194:  u_int miblen = sizeof(mib) / sizeof(mib[0]);
        -:  195:
        -:  196:  // get number of structs
        -:  197:  size_t size;
        -:  198:  if (sysctl(mib, miblen, NULL, &size, NULL, 0)) {
        -:  199:    return 0;
        -:  200:  }
        -:  201:
        -:  202:  mib[5] = static_cast<int>(size / static_cast<size_t>(mib[4]));
        -:  203:
        -:  204:  // populate array of structs
        -:  205:  struct kinfo_proc info[mib[5]];
        -:  206:  if (sysctl(mib, miblen, &info, &size, NULL, 0)) {
        -:  207:    return 0;
        -:  208:  }
        -:  209:
        -:  210:  // exclude empty members
        -:  211:  size_t nthreads = 0;
        -:  212:  for (size_t i = 0; i < size / static_cast<size_t>(mib[4]); i++) {
        -:  213:    if (info[i].p_tid != -1)
        -:  214:      nthreads++;
        -:  215:  }
        -:  216:  return nthreads;
        -:  217:}
        -:  218:
        -:  219:#elif GTEST_OS_QNX
        -:  220:
        -:  221:// Returns the number of threads running in the process, or 0 to indicate that
        -:  222:// we cannot detect it.
        -:  223:size_t GetThreadCount() {
        -:  224:  const int fd = open("/proc/self/as", O_RDONLY);
        -:  225:  if (fd < 0) {
        -:  226:    return 0;
        -:  227:  }
        -:  228:  procfs_info process_info;
        -:  229:  const int status =
        -:  230:      devctl(fd, DCMD_PROC_INFO, &process_info, sizeof(process_info), nullptr);
        -:  231:  close(fd);
        -:  232:  if (status == EOK) {
        -:  233:    return static_cast<size_t>(process_info.num_threads);
        -:  234:  } else {
        -:  235:    return 0;
        -:  236:  }
        -:  237:}
        -:  238:
        -:  239:#elif GTEST_OS_AIX
        -:  240:
        -:  241:size_t GetThreadCount() {
        -:  242:  struct procentry64 entry;
        -:  243:  pid_t pid = getpid();
        -:  244:  int status = getprocs64(&entry, sizeof(entry), nullptr, 0, &pid, 1);
        -:  245:  if (status == 1) {
        -:  246:    return entry.pi_thcount;
        -:  247:  } else {
        -:  248:    return 0;
        -:  249:  }
        -:  250:}
        -:  251:
        -:  252:#elif GTEST_OS_FUCHSIA
        -:  253:
        -:  254:size_t GetThreadCount() {
        -:  255:  int dummy_buffer;
        -:  256:  size_t avail;
        -:  257:  zx_status_t status = zx_object_get_info(
        -:  258:      zx_process_self(),
        -:  259:      ZX_INFO_PROCESS_THREADS,
        -:  260:      &dummy_buffer,
        -:  261:      0,
        -:  262:      nullptr,
        -:  263:      &avail);
        -:  264:  if (status == ZX_OK) {
        -:  265:    return avail;
        -:  266:  } else {
        -:  267:    return 0;
        -:  268:  }
        -:  269:}
        -:  270:
        -:  271:#else
        -:  272:
        -:  273:size_t GetThreadCount() {
        -:  274:  // There's no portable way to detect the number of threads, so we just
        -:  275:  // return 0 to indicate that we cannot detect it.
        -:  276:  return 0;
        -:  277:}
        -:  278:
        -:  279:#endif  // GTEST_OS_LINUX
        -:  280:
        -:  281:#if GTEST_IS_THREADSAFE && GTEST_OS_WINDOWS
        -:  282:
        -:  283:void SleepMilliseconds(int n) {
        -:  284:  ::Sleep(static_cast<DWORD>(n));
        -:  285:}
        -:  286:
        -:  287:AutoHandle::AutoHandle()
        -:  288:    : handle_(INVALID_HANDLE_VALUE) {}
        -:  289:
        -:  290:AutoHandle::AutoHandle(Handle handle)
        -:  291:    : handle_(handle) {}
        -:  292:
        -:  293:AutoHandle::~AutoHandle() {
        -:  294:  Reset();
        -:  295:}
        -:  296:
        -:  297:AutoHandle::Handle AutoHandle::Get() const {
        -:  298:  return handle_;
        -:  299:}
        -:  300:
        -:  301:void AutoHandle::Reset() {
        -:  302:  Reset(INVALID_HANDLE_VALUE);
        -:  303:}
        -:  304:
        -:  305:void AutoHandle::Reset(HANDLE handle) {
        -:  306:  // Resetting with the same handle we already own is invalid.
        -:  307:  if (handle_ != handle) {
        -:  308:    if (IsCloseable()) {
        -:  309:      ::CloseHandle(handle_);
        -:  310:    }
        -:  311:    handle_ = handle;
        -:  312:  } else {
        -:  313:    GTEST_CHECK_(!IsCloseable())
        -:  314:        << "Resetting a valid handle to itself is likely a programmer error "
        -:  315:            "and thus not allowed.";
        -:  316:  }
        -:  317:}
        -:  318:
        -:  319:bool AutoHandle::IsCloseable() const {
        -:  320:  // Different Windows APIs may use either of these values to represent an
        -:  321:  // invalid handle.
        -:  322:  return handle_ != nullptr && handle_ != INVALID_HANDLE_VALUE;
        -:  323:}
        -:  324:
        -:  325:Notification::Notification()
        -:  326:    : event_(::CreateEvent(nullptr,     // Default security attributes.
        -:  327:                           TRUE,        // Do not reset automatically.
        -:  328:                           FALSE,       // Initially unset.
        -:  329:                           nullptr)) {  // Anonymous event.
        -:  330:  GTEST_CHECK_(event_.Get() != nullptr);
        -:  331:}
        -:  332:
        -:  333:void Notification::Notify() {
        -:  334:  GTEST_CHECK_(::SetEvent(event_.Get()) != FALSE);
        -:  335:}
        -:  336:
        -:  337:void Notification::WaitForNotification() {
        -:  338:  GTEST_CHECK_(
        -:  339:      ::WaitForSingleObject(event_.Get(), INFINITE) == WAIT_OBJECT_0);
        -:  340:}
        -:  341:
        -:  342:Mutex::Mutex()
        -:  343:    : owner_thread_id_(0),
        -:  344:      type_(kDynamic),
        -:  345:      critical_section_init_phase_(0),
        -:  346:      critical_section_(new CRITICAL_SECTION) {
        -:  347:  ::InitializeCriticalSection(critical_section_);
        -:  348:}
        -:  349:
        -:  350:Mutex::~Mutex() {
        -:  351:  // Static mutexes are leaked intentionally. It is not thread-safe to try
        -:  352:  // to clean them up.
        -:  353:  if (type_ == kDynamic) {
        -:  354:    ::DeleteCriticalSection(critical_section_);
        -:  355:    delete critical_section_;
        -:  356:    critical_section_ = nullptr;
        -:  357:  }
        -:  358:}
        -:  359:
        -:  360:void Mutex::Lock() {
        -:  361:  ThreadSafeLazyInit();
        -:  362:  ::EnterCriticalSection(critical_section_);
        -:  363:  owner_thread_id_ = ::GetCurrentThreadId();
        -:  364:}
        -:  365:
        -:  366:void Mutex::Unlock() {
        -:  367:  ThreadSafeLazyInit();
        -:  368:  // We don't protect writing to owner_thread_id_ here, as it's the
        -:  369:  // caller's responsibility to ensure that the current thread holds the
        -:  370:  // mutex when this is called.
        -:  371:  owner_thread_id_ = 0;
        -:  372:  ::LeaveCriticalSection(critical_section_);
        -:  373:}
        -:  374:
        -:  375:// Does nothing if the current thread holds the mutex. Otherwise, crashes
        -:  376:// with high probability.
        -:  377:void Mutex::AssertHeld() {
        -:  378:  ThreadSafeLazyInit();
        -:  379:  GTEST_CHECK_(owner_thread_id_ == ::GetCurrentThreadId())
        -:  380:      << "The current thread is not holding the mutex @" << this;
        -:  381:}
        -:  382:
        -:  383:namespace {
        -:  384:
        -:  385:#ifdef _MSC_VER
        -:  386:// Use the RAII idiom to flag mem allocs that are intentionally never
        -:  387:// deallocated. The motivation is to silence the false positive mem leaks
        -:  388:// that are reported by the debug version of MS's CRT which can only detect
        -:  389:// if an alloc is missing a matching deallocation.
        -:  390:// Example:
        -:  391://    MemoryIsNotDeallocated memory_is_not_deallocated;
        -:  392://    critical_section_ = new CRITICAL_SECTION;
        -:  393://
        -:  394:class MemoryIsNotDeallocated
        -:  395:{
        -:  396: public:
        -:  397:  MemoryIsNotDeallocated() : old_crtdbg_flag_(0) {
        -:  398:    old_crtdbg_flag_ = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);
        -:  399:    // Set heap allocation block type to _IGNORE_BLOCK so that MS debug CRT
        -:  400:    // doesn't report mem leak if there's no matching deallocation.
        -:  401:    _CrtSetDbgFlag(old_crtdbg_flag_ & ~_CRTDBG_ALLOC_MEM_DF);
        -:  402:  }
        -:  403:
        -:  404:  ~MemoryIsNotDeallocated() {
        -:  405:    // Restore the original _CRTDBG_ALLOC_MEM_DF flag
        -:  406:    _CrtSetDbgFlag(old_crtdbg_flag_);
        -:  407:  }
        -:  408:
        -:  409: private:
        -:  410:  int old_crtdbg_flag_;
        -:  411:
        -:  412:  GTEST_DISALLOW_COPY_AND_ASSIGN_(MemoryIsNotDeallocated);
        -:  413:};
        -:  414:#endif  // _MSC_VER
        -:  415:
        -:  416:}  // namespace
        -:  417:
        -:  418:// Initializes owner_thread_id_ and critical_section_ in static mutexes.
        -:  419:void Mutex::ThreadSafeLazyInit() {
        -:  420:  // Dynamic mutexes are initialized in the constructor.
        -:  421:  if (type_ == kStatic) {
        -:  422:    switch (
        -:  423:        ::InterlockedCompareExchange(&critical_section_init_phase_, 1L, 0L)) {
        -:  424:      case 0:
        -:  425:        // If critical_section_init_phase_ was 0 before the exchange, we
        -:  426:        // are the first to test it and need to perform the initialization.
        -:  427:        owner_thread_id_ = 0;
        -:  428:        {
        -:  429:          // Use RAII to flag that following mem alloc is never deallocated.
        -:  430:#ifdef _MSC_VER
        -:  431:          MemoryIsNotDeallocated memory_is_not_deallocated;
        -:  432:#endif  // _MSC_VER
        -:  433:          critical_section_ = new CRITICAL_SECTION;
        -:  434:        }
        -:  435:        ::InitializeCriticalSection(critical_section_);
        -:  436:        // Updates the critical_section_init_phase_ to 2 to signal
        -:  437:        // initialization complete.
        -:  438:        GTEST_CHECK_(::InterlockedCompareExchange(
        -:  439:                          &critical_section_init_phase_, 2L, 1L) ==
        -:  440:                      1L);
        -:  441:        break;
        -:  442:      case 1:
        -:  443:        // Somebody else is already initializing the mutex; spin until they
        -:  444:        // are done.
        -:  445:        while (::InterlockedCompareExchange(&critical_section_init_phase_,
        -:  446:                                            2L,
        -:  447:                                            2L) != 2L) {
        -:  448:          // Possibly yields the rest of the thread's time slice to other
        -:  449:          // threads.
        -:  450:          ::Sleep(0);
        -:  451:        }
        -:  452:        break;
        -:  453:
        -:  454:      case 2:
        -:  455:        break;  // The mutex is already initialized and ready for use.
        -:  456:
        -:  457:      default:
        -:  458:        GTEST_CHECK_(false)
        -:  459:            << "Unexpected value of critical_section_init_phase_ "
        -:  460:            << "while initializing a static mutex.";
        -:  461:    }
        -:  462:  }
        -:  463:}
        -:  464:
        -:  465:namespace {
        -:  466:
        -:  467:class ThreadWithParamSupport : public ThreadWithParamBase {
        -:  468: public:
        -:  469:  static HANDLE CreateThread(Runnable* runnable,
        -:  470:                             Notification* thread_can_start) {
        -:  471:    ThreadMainParam* param = new ThreadMainParam(runnable, thread_can_start);
        -:  472:    DWORD thread_id;
        -:  473:    HANDLE thread_handle = ::CreateThread(
        -:  474:        nullptr,  // Default security.
        -:  475:        0,        // Default stack size.
        -:  476:        &ThreadWithParamSupport::ThreadMain,
        -:  477:        param,        // Parameter to ThreadMainStatic
        -:  478:        0x0,          // Default creation flags.
        -:  479:        &thread_id);  // Need a valid pointer for the call to work under Win98.
        -:  480:    GTEST_CHECK_(thread_handle != nullptr)
        -:  481:        << "CreateThread failed with error " << ::GetLastError() << ".";
        -:  482:    if (thread_handle == nullptr) {
        -:  483:      delete param;
        -:  484:    }
        -:  485:    return thread_handle;
        -:  486:  }
        -:  487:
        -:  488: private:
        -:  489:  struct ThreadMainParam {
        -:  490:    ThreadMainParam(Runnable* runnable, Notification* thread_can_start)
        -:  491:        : runnable_(runnable),
        -:  492:          thread_can_start_(thread_can_start) {
        -:  493:    }
        -:  494:    std::unique_ptr<Runnable> runnable_;
        -:  495:    // Does not own.
        -:  496:    Notification* thread_can_start_;
        -:  497:  };
        -:  498:
        -:  499:  static DWORD WINAPI ThreadMain(void* ptr) {
        -:  500:    // Transfers ownership.
        -:  501:    std::unique_ptr<ThreadMainParam> param(static_cast<ThreadMainParam*>(ptr));
        -:  502:    if (param->thread_can_start_ != nullptr)
        -:  503:      param->thread_can_start_->WaitForNotification();
        -:  504:    param->runnable_->Run();
        -:  505:    return 0;
        -:  506:  }
        -:  507:
        -:  508:  // Prohibit instantiation.
        -:  509:  ThreadWithParamSupport();
        -:  510:
        -:  511:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ThreadWithParamSupport);
        -:  512:};
        -:  513:
        -:  514:}  // namespace
        -:  515:
        -:  516:ThreadWithParamBase::ThreadWithParamBase(Runnable *runnable,
        -:  517:                                         Notification* thread_can_start)
        -:  518:      : thread_(ThreadWithParamSupport::CreateThread(runnable,
        -:  519:                                                     thread_can_start)) {
        -:  520:}
        -:  521:
        -:  522:ThreadWithParamBase::~ThreadWithParamBase() {
        -:  523:  Join();
        -:  524:}
        -:  525:
        -:  526:void ThreadWithParamBase::Join() {
        -:  527:  GTEST_CHECK_(::WaitForSingleObject(thread_.Get(), INFINITE) == WAIT_OBJECT_0)
        -:  528:      << "Failed to join the thread with error " << ::GetLastError() << ".";
        -:  529:}
        -:  530:
        -:  531:// Maps a thread to a set of ThreadIdToThreadLocals that have values
        -:  532:// instantiated on that thread and notifies them when the thread exits.  A
        -:  533:// ThreadLocal instance is expected to persist until all threads it has
        -:  534:// values on have terminated.
        -:  535:class ThreadLocalRegistryImpl {
        -:  536: public:
        -:  537:  // Registers thread_local_instance as having value on the current thread.
        -:  538:  // Returns a value that can be used to identify the thread from other threads.
        -:  539:  static ThreadLocalValueHolderBase* GetValueOnCurrentThread(
        -:  540:      const ThreadLocalBase* thread_local_instance) {
        -:  541:#ifdef _MSC_VER
        -:  542:    MemoryIsNotDeallocated memory_is_not_deallocated;
        -:  543:#endif  // _MSC_VER
        -:  544:    DWORD current_thread = ::GetCurrentThreadId();
        -:  545:    MutexLock lock(&mutex_);
        -:  546:    ThreadIdToThreadLocals* const thread_to_thread_locals =
        -:  547:        GetThreadLocalsMapLocked();
        -:  548:    ThreadIdToThreadLocals::iterator thread_local_pos =
        -:  549:        thread_to_thread_locals->find(current_thread);
        -:  550:    if (thread_local_pos == thread_to_thread_locals->end()) {
        -:  551:      thread_local_pos = thread_to_thread_locals->insert(
        -:  552:          std::make_pair(current_thread, ThreadLocalValues())).first;
        -:  553:      StartWatcherThreadFor(current_thread);
        -:  554:    }
        -:  555:    ThreadLocalValues& thread_local_values = thread_local_pos->second;
        -:  556:    ThreadLocalValues::iterator value_pos =
        -:  557:        thread_local_values.find(thread_local_instance);
        -:  558:    if (value_pos == thread_local_values.end()) {
        -:  559:      value_pos =
        -:  560:          thread_local_values
        -:  561:              .insert(std::make_pair(
        -:  562:                  thread_local_instance,
        -:  563:                  std::shared_ptr<ThreadLocalValueHolderBase>(
        -:  564:                      thread_local_instance->NewValueForCurrentThread())))
        -:  565:              .first;
        -:  566:    }
        -:  567:    return value_pos->second.get();
        -:  568:  }
        -:  569:
        -:  570:  static void OnThreadLocalDestroyed(
        -:  571:      const ThreadLocalBase* thread_local_instance) {
        -:  572:    std::vector<std::shared_ptr<ThreadLocalValueHolderBase> > value_holders;
        -:  573:    // Clean up the ThreadLocalValues data structure while holding the lock, but
        -:  574:    // defer the destruction of the ThreadLocalValueHolderBases.
        -:  575:    {
        -:  576:      MutexLock lock(&mutex_);
        -:  577:      ThreadIdToThreadLocals* const thread_to_thread_locals =
        -:  578:          GetThreadLocalsMapLocked();
        -:  579:      for (ThreadIdToThreadLocals::iterator it =
        -:  580:          thread_to_thread_locals->begin();
        -:  581:          it != thread_to_thread_locals->end();
        -:  582:          ++it) {
        -:  583:        ThreadLocalValues& thread_local_values = it->second;
        -:  584:        ThreadLocalValues::iterator value_pos =
        -:  585:            thread_local_values.find(thread_local_instance);
        -:  586:        if (value_pos != thread_local_values.end()) {
        -:  587:          value_holders.push_back(value_pos->second);
        -:  588:          thread_local_values.erase(value_pos);
        -:  589:          // This 'if' can only be successful at most once, so theoretically we
        -:  590:          // could break out of the loop here, but we don't bother doing so.
        -:  591:        }
        -:  592:      }
        -:  593:    }
        -:  594:    // Outside the lock, let the destructor for 'value_holders' deallocate the
        -:  595:    // ThreadLocalValueHolderBases.
        -:  596:  }
        -:  597:
        -:  598:  static void OnThreadExit(DWORD thread_id) {
        -:  599:    GTEST_CHECK_(thread_id != 0) << ::GetLastError();
        -:  600:    std::vector<std::shared_ptr<ThreadLocalValueHolderBase> > value_holders;
        -:  601:    // Clean up the ThreadIdToThreadLocals data structure while holding the
        -:  602:    // lock, but defer the destruction of the ThreadLocalValueHolderBases.
        -:  603:    {
        -:  604:      MutexLock lock(&mutex_);
        -:  605:      ThreadIdToThreadLocals* const thread_to_thread_locals =
        -:  606:          GetThreadLocalsMapLocked();
        -:  607:      ThreadIdToThreadLocals::iterator thread_local_pos =
        -:  608:          thread_to_thread_locals->find(thread_id);
        -:  609:      if (thread_local_pos != thread_to_thread_locals->end()) {
        -:  610:        ThreadLocalValues& thread_local_values = thread_local_pos->second;
        -:  611:        for (ThreadLocalValues::iterator value_pos =
        -:  612:            thread_local_values.begin();
        -:  613:            value_pos != thread_local_values.end();
        -:  614:            ++value_pos) {
        -:  615:          value_holders.push_back(value_pos->second);
        -:  616:        }
        -:  617:        thread_to_thread_locals->erase(thread_local_pos);
        -:  618:      }
        -:  619:    }
        -:  620:    // Outside the lock, let the destructor for 'value_holders' deallocate the
        -:  621:    // ThreadLocalValueHolderBases.
        -:  622:  }
        -:  623:
        -:  624: private:
        -:  625:  // In a particular thread, maps a ThreadLocal object to its value.
        -:  626:  typedef std::map<const ThreadLocalBase*,
        -:  627:                   std::shared_ptr<ThreadLocalValueHolderBase> >
        -:  628:      ThreadLocalValues;
        -:  629:  // Stores all ThreadIdToThreadLocals having values in a thread, indexed by
        -:  630:  // thread's ID.
        -:  631:  typedef std::map<DWORD, ThreadLocalValues> ThreadIdToThreadLocals;
        -:  632:
        -:  633:  // Holds the thread id and thread handle that we pass from
        -:  634:  // StartWatcherThreadFor to WatcherThreadFunc.
        -:  635:  typedef std::pair<DWORD, HANDLE> ThreadIdAndHandle;
        -:  636:
        -:  637:  static void StartWatcherThreadFor(DWORD thread_id) {
        -:  638:    // The returned handle will be kept in thread_map and closed by
        -:  639:    // watcher_thread in WatcherThreadFunc.
        -:  640:    HANDLE thread = ::OpenThread(SYNCHRONIZE | THREAD_QUERY_INFORMATION,
        -:  641:                                 FALSE,
        -:  642:                                 thread_id);
        -:  643:    GTEST_CHECK_(thread != nullptr);
        -:  644:    // We need to pass a valid thread ID pointer into CreateThread for it
        -:  645:    // to work correctly under Win98.
        -:  646:    DWORD watcher_thread_id;
        -:  647:    HANDLE watcher_thread = ::CreateThread(
        -:  648:        nullptr,  // Default security.
        -:  649:        0,        // Default stack size
        -:  650:        &ThreadLocalRegistryImpl::WatcherThreadFunc,
        -:  651:        reinterpret_cast<LPVOID>(new ThreadIdAndHandle(thread_id, thread)),
        -:  652:        CREATE_SUSPENDED, &watcher_thread_id);
        -:  653:    GTEST_CHECK_(watcher_thread != nullptr);
        -:  654:    // Give the watcher thread the same priority as ours to avoid being
        -:  655:    // blocked by it.
        -:  656:    ::SetThreadPriority(watcher_thread,
        -:  657:                        ::GetThreadPriority(::GetCurrentThread()));
        -:  658:    ::ResumeThread(watcher_thread);
        -:  659:    ::CloseHandle(watcher_thread);
        -:  660:  }
        -:  661:
        -:  662:  // Monitors exit from a given thread and notifies those
        -:  663:  // ThreadIdToThreadLocals about thread termination.
        -:  664:  static DWORD WINAPI WatcherThreadFunc(LPVOID param) {
        -:  665:    const ThreadIdAndHandle* tah =
        -:  666:        reinterpret_cast<const ThreadIdAndHandle*>(param);
        -:  667:    GTEST_CHECK_(
        -:  668:        ::WaitForSingleObject(tah->second, INFINITE) == WAIT_OBJECT_0);
        -:  669:    OnThreadExit(tah->first);
        -:  670:    ::CloseHandle(tah->second);
        -:  671:    delete tah;
        -:  672:    return 0;
        -:  673:  }
        -:  674:
        -:  675:  // Returns map of thread local instances.
        -:  676:  static ThreadIdToThreadLocals* GetThreadLocalsMapLocked() {
        -:  677:    mutex_.AssertHeld();
        -:  678:#ifdef _MSC_VER
        -:  679:    MemoryIsNotDeallocated memory_is_not_deallocated;
        -:  680:#endif  // _MSC_VER
        -:  681:    static ThreadIdToThreadLocals* map = new ThreadIdToThreadLocals();
        -:  682:    return map;
        -:  683:  }
        -:  684:
        -:  685:  // Protects access to GetThreadLocalsMapLocked() and its return value.
        -:  686:  static Mutex mutex_;
        -:  687:  // Protects access to GetThreadMapLocked() and its return value.
        -:  688:  static Mutex thread_map_mutex_;
        -:  689:};
        -:  690:
        -:  691:Mutex ThreadLocalRegistryImpl::mutex_(Mutex::kStaticMutex);
        -:  692:Mutex ThreadLocalRegistryImpl::thread_map_mutex_(Mutex::kStaticMutex);
        -:  693:
        -:  694:ThreadLocalValueHolderBase* ThreadLocalRegistry::GetValueOnCurrentThread(
        -:  695:      const ThreadLocalBase* thread_local_instance) {
        -:  696:  return ThreadLocalRegistryImpl::GetValueOnCurrentThread(
        -:  697:      thread_local_instance);
        -:  698:}
        -:  699:
        -:  700:void ThreadLocalRegistry::OnThreadLocalDestroyed(
        -:  701:      const ThreadLocalBase* thread_local_instance) {
        -:  702:  ThreadLocalRegistryImpl::OnThreadLocalDestroyed(thread_local_instance);
        -:  703:}
        -:  704:
        -:  705:#endif  // GTEST_IS_THREADSAFE && GTEST_OS_WINDOWS
        -:  706:
        -:  707:#if GTEST_USES_POSIX_RE
        -:  708:
        -:  709:// Implements RE.  Currently only needed for death tests.
        -:  710:
    #####:  711:RE::~RE() {
    #####:  712:  if (is_valid_) {
    %%%%%:  712-block  0
        -:  713:    // regfree'ing an invalid regex might crash because the content
        -:  714:    // of the regex is undefined. Since the regex's are essentially
        -:  715:    // the same, one cannot be valid (or invalid) without the other
        -:  716:    // being so too.
    #####:  717:    regfree(&partial_regex_);
    %%%%%:  717-block  0
    #####:  718:    regfree(&full_regex_);
        -:  719:  }
    #####:  720:  free(const_cast<char*>(pattern_));
    #####:  721:}
        -:  722:
        -:  723:// Returns true if and only if regular expression re matches the entire str.
    #####:  724:bool RE::FullMatch(const char* str, const RE& re) {
    #####:  725:  if (!re.is_valid_) return false;
    %%%%%:  725-block  0
    %%%%%:  725-block  1
        -:  726:
        -:  727:  regmatch_t match;
    #####:  728:  return regexec(&re.full_regex_, str, 1, &match, 0) == 0;
    %%%%%:  728-block  0
    %%%%%:  728-block  1
        -:  729:}
        -:  730:
        -:  731:// Returns true if and only if regular expression re matches a substring of
        -:  732:// str (including str itself).
    #####:  733:bool RE::PartialMatch(const char* str, const RE& re) {
    #####:  734:  if (!re.is_valid_) return false;
    %%%%%:  734-block  0
    %%%%%:  734-block  1
        -:  735:
        -:  736:  regmatch_t match;
    #####:  737:  return regexec(&re.partial_regex_, str, 1, &match, 0) == 0;
    %%%%%:  737-block  0
    %%%%%:  737-block  1
        -:  738:}
        -:  739:
        -:  740:// Initializes an RE from its string representation.
    #####:  741:void RE::Init(const char* regex) {
    #####:  742:  pattern_ = posix::StrDup(regex);
    %%%%%:  742-block  0
        -:  743:
        -:  744:  // Reserves enough bytes to hold the regular expression used for a
        -:  745:  // full match.
    #####:  746:  const size_t full_regex_len = strlen(regex) + 10;
    #####:  747:  char* const full_pattern = new char[full_regex_len];
        -:  748:
    #####:  749:  snprintf(full_pattern, full_regex_len, "^(%s)$", regex);
    #####:  750:  is_valid_ = regcomp(&full_regex_, full_pattern, REG_EXTENDED) == 0;
        -:  751:  // We want to call regcomp(&partial_regex_, ...) even if the
        -:  752:  // previous expression returns false.  Otherwise partial_regex_ may
        -:  753:  // not be properly initialized can may cause trouble when it's
        -:  754:  // freed.
        -:  755:  //
        -:  756:  // Some implementation of POSIX regex (e.g. on at least some
        -:  757:  // versions of Cygwin) doesn't accept the empty string as a valid
        -:  758:  // regex.  We change it to an equivalent form "()" to be safe.
    #####:  759:  if (is_valid_) {
    #####:  760:    const char* const partial_regex = (*regex == '\0') ? "()" : regex;
    %%%%%:  760-block  0
    %%%%%:  760-block  1
    %%%%%:  760-block  2
    #####:  761:    is_valid_ = regcomp(&partial_regex_, partial_regex, REG_EXTENDED) == 0;
    %%%%%:  761-block  0
        -:  762:  }
    #####:  763:  EXPECT_TRUE(is_valid_)
    %%%%%:  763-block  0
    %%%%%:  763-block  1
    %%%%%:  763-block  2
    %%%%%:  763-block  3
    %%%%%:  763-block  4
    %%%%%:  763-block  5
    $$$$$:  763-block  6
    $$$$$:  763-block  7
    $$$$$:  763-block  8
    $$$$$:  763-block  9
    $$$$$:  763-block 10
    $$$$$:  763-block 11
    $$$$$:  763-block 12
    #####:  764:      << "Regular expression \"" << regex
    %%%%%:  764-block  0
    %%%%%:  764-block  1
    #####:  765:      << "\" is not a valid POSIX Extended regular expression.";
    %%%%%:  765-block  0
    %%%%%:  765-block  1
        -:  766:
    #####:  767:  delete[] full_pattern;
    %%%%%:  767-block  0
    #####:  768:}
    %%%%%:  768-block  0
        -:  769:
        -:  770:#elif GTEST_USES_SIMPLE_RE
        -:  771:
        -:  772:// Returns true if and only if ch appears anywhere in str (excluding the
        -:  773:// terminating '\0' character).
        -:  774:bool IsInSet(char ch, const char* str) {
        -:  775:  return ch != '\0' && strchr(str, ch) != nullptr;
        -:  776:}
        -:  777:
        -:  778:// Returns true if and only if ch belongs to the given classification.
        -:  779:// Unlike similar functions in <ctype.h>, these aren't affected by the
        -:  780:// current locale.
        -:  781:bool IsAsciiDigit(char ch) { return '0' <= ch && ch <= '9'; }
        -:  782:bool IsAsciiPunct(char ch) {
        -:  783:  return IsInSet(ch, "^-!\"#$%&'()*+,./:;<=>?@[\\]_`{|}~");
        -:  784:}
        -:  785:bool IsRepeat(char ch) { return IsInSet(ch, "?*+"); }
        -:  786:bool IsAsciiWhiteSpace(char ch) { return IsInSet(ch, " \f\n\r\t\v"); }
        -:  787:bool IsAsciiWordChar(char ch) {
        -:  788:  return ('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') ||
        -:  789:      ('0' <= ch && ch <= '9') || ch == '_';
        -:  790:}
        -:  791:
        -:  792:// Returns true if and only if "\\c" is a supported escape sequence.
        -:  793:bool IsValidEscape(char c) {
        -:  794:  return (IsAsciiPunct(c) || IsInSet(c, "dDfnrsStvwW"));
        -:  795:}
        -:  796:
        -:  797:// Returns true if and only if the given atom (specified by escaped and
        -:  798:// pattern) matches ch.  The result is undefined if the atom is invalid.
        -:  799:bool AtomMatchesChar(bool escaped, char pattern_char, char ch) {
        -:  800:  if (escaped) {  // "\\p" where p is pattern_char.
        -:  801:    switch (pattern_char) {
        -:  802:      case 'd': return IsAsciiDigit(ch);
        -:  803:      case 'D': return !IsAsciiDigit(ch);
        -:  804:      case 'f': return ch == '\f';
        -:  805:      case 'n': return ch == '\n';
        -:  806:      case 'r': return ch == '\r';
        -:  807:      case 's': return IsAsciiWhiteSpace(ch);
        -:  808:      case 'S': return !IsAsciiWhiteSpace(ch);
        -:  809:      case 't': return ch == '\t';
        -:  810:      case 'v': return ch == '\v';
        -:  811:      case 'w': return IsAsciiWordChar(ch);
        -:  812:      case 'W': return !IsAsciiWordChar(ch);
        -:  813:    }
        -:  814:    return IsAsciiPunct(pattern_char) && pattern_char == ch;
        -:  815:  }
        -:  816:
        -:  817:  return (pattern_char == '.' && ch != '\n') || pattern_char == ch;
        -:  818:}
        -:  819:
        -:  820:// Helper function used by ValidateRegex() to format error messages.
        -:  821:static std::string FormatRegexSyntaxError(const char* regex, int index) {
        -:  822:  return (Message() << "Syntax error at index " << index
        -:  823:          << " in simple regular expression \"" << regex << "\": ").GetString();
        -:  824:}
        -:  825:
        -:  826:// Generates non-fatal failures and returns false if regex is invalid;
        -:  827:// otherwise returns true.
        -:  828:bool ValidateRegex(const char* regex) {
        -:  829:  if (regex == nullptr) {
        -:  830:    ADD_FAILURE() << "NULL is not a valid simple regular expression.";
        -:  831:    return false;
        -:  832:  }
        -:  833:
        -:  834:  bool is_valid = true;
        -:  835:
        -:  836:  // True if and only if ?, *, or + can follow the previous atom.
        -:  837:  bool prev_repeatable = false;
        -:  838:  for (int i = 0; regex[i]; i++) {
        -:  839:    if (regex[i] == '\\') {  // An escape sequence
        -:  840:      i++;
        -:  841:      if (regex[i] == '\0') {
        -:  842:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)
        -:  843:                      << "'\\' cannot appear at the end.";
        -:  844:        return false;
        -:  845:      }
        -:  846:
        -:  847:      if (!IsValidEscape(regex[i])) {
        -:  848:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)
        -:  849:                      << "invalid escape sequence \"\\" << regex[i] << "\".";
        -:  850:        is_valid = false;
        -:  851:      }
        -:  852:      prev_repeatable = true;
        -:  853:    } else {  // Not an escape sequence.
        -:  854:      const char ch = regex[i];
        -:  855:
        -:  856:      if (ch == '^' && i > 0) {
        -:  857:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
        -:  858:                      << "'^' can only appear at the beginning.";
        -:  859:        is_valid = false;
        -:  860:      } else if (ch == '$' && regex[i + 1] != '\0') {
        -:  861:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
        -:  862:                      << "'$' can only appear at the end.";
        -:  863:        is_valid = false;
        -:  864:      } else if (IsInSet(ch, "()[]{}|")) {
        -:  865:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
        -:  866:                      << "'" << ch << "' is unsupported.";
        -:  867:        is_valid = false;
        -:  868:      } else if (IsRepeat(ch) && !prev_repeatable) {
        -:  869:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i)
        -:  870:                      << "'" << ch << "' can only follow a repeatable token.";
        -:  871:        is_valid = false;
        -:  872:      }
        -:  873:
        -:  874:      prev_repeatable = !IsInSet(ch, "^$?*+");
        -:  875:    }
        -:  876:  }
        -:  877:
        -:  878:  return is_valid;
        -:  879:}
        -:  880:
        -:  881:// Matches a repeated regex atom followed by a valid simple regular
        -:  882:// expression.  The regex atom is defined as c if escaped is false,
        -:  883:// or \c otherwise.  repeat is the repetition meta character (?, *,
        -:  884:// or +).  The behavior is undefined if str contains too many
        -:  885:// characters to be indexable by size_t, in which case the test will
        -:  886:// probably time out anyway.  We are fine with this limitation as
        -:  887:// std::string has it too.
        -:  888:bool MatchRepetitionAndRegexAtHead(
        -:  889:    bool escaped, char c, char repeat, const char* regex,
        -:  890:    const char* str) {
        -:  891:  const size_t min_count = (repeat == '+') ? 1 : 0;
        -:  892:  const size_t max_count = (repeat == '?') ? 1 :
        -:  893:      static_cast<size_t>(-1) - 1;
        -:  894:  // We cannot call numeric_limits::max() as it conflicts with the
        -:  895:  // max() macro on Windows.
        -:  896:
        -:  897:  for (size_t i = 0; i <= max_count; ++i) {
        -:  898:    // We know that the atom matches each of the first i characters in str.
        -:  899:    if (i >= min_count && MatchRegexAtHead(regex, str + i)) {
        -:  900:      // We have enough matches at the head, and the tail matches too.
        -:  901:      // Since we only care about *whether* the pattern matches str
        -:  902:      // (as opposed to *how* it matches), there is no need to find a
        -:  903:      // greedy match.
        -:  904:      return true;
        -:  905:    }
        -:  906:    if (str[i] == '\0' || !AtomMatchesChar(escaped, c, str[i]))
        -:  907:      return false;
        -:  908:  }
        -:  909:  return false;
        -:  910:}
        -:  911:
        -:  912:// Returns true if and only if regex matches a prefix of str. regex must
        -:  913:// be a valid simple regular expression and not start with "^", or the
        -:  914:// result is undefined.
        -:  915:bool MatchRegexAtHead(const char* regex, const char* str) {
        -:  916:  if (*regex == '\0')  // An empty regex matches a prefix of anything.
        -:  917:    return true;
        -:  918:
        -:  919:  // "$" only matches the end of a string.  Note that regex being
        -:  920:  // valid guarantees that there's nothing after "$" in it.
        -:  921:  if (*regex == '$')
        -:  922:    return *str == '\0';
        -:  923:
        -:  924:  // Is the first thing in regex an escape sequence?
        -:  925:  const bool escaped = *regex == '\\';
        -:  926:  if (escaped)
        -:  927:    ++regex;
        -:  928:  if (IsRepeat(regex[1])) {
        -:  929:    // MatchRepetitionAndRegexAtHead() calls MatchRegexAtHead(), so
        -:  930:    // here's an indirect recursion.  It terminates as the regex gets
        -:  931:    // shorter in each recursion.
        -:  932:    return MatchRepetitionAndRegexAtHead(
        -:  933:        escaped, regex[0], regex[1], regex + 2, str);
        -:  934:  } else {
        -:  935:    // regex isn't empty, isn't "$", and doesn't start with a
        -:  936:    // repetition.  We match the first atom of regex with the first
        -:  937:    // character of str and recurse.
        -:  938:    return (*str != '\0') && AtomMatchesChar(escaped, *regex, *str) &&
        -:  939:        MatchRegexAtHead(regex + 1, str + 1);
        -:  940:  }
        -:  941:}
        -:  942:
        -:  943:// Returns true if and only if regex matches any substring of str.  regex must
        -:  944:// be a valid simple regular expression, or the result is undefined.
        -:  945://
        -:  946:// The algorithm is recursive, but the recursion depth doesn't exceed
        -:  947:// the regex length, so we won't need to worry about running out of
        -:  948:// stack space normally.  In rare cases the time complexity can be
        -:  949:// exponential with respect to the regex length + the string length,
        -:  950:// but usually it's must faster (often close to linear).
        -:  951:bool MatchRegexAnywhere(const char* regex, const char* str) {
        -:  952:  if (regex == nullptr || str == nullptr) return false;
        -:  953:
        -:  954:  if (*regex == '^')
        -:  955:    return MatchRegexAtHead(regex + 1, str);
        -:  956:
        -:  957:  // A successful match can be anywhere in str.
        -:  958:  do {
        -:  959:    if (MatchRegexAtHead(regex, str))
        -:  960:      return true;
        -:  961:  } while (*str++ != '\0');
        -:  962:  return false;
        -:  963:}
        -:  964:
        -:  965:// Implements the RE class.
        -:  966:
        -:  967:RE::~RE() {
        -:  968:  free(const_cast<char*>(pattern_));
        -:  969:  free(const_cast<char*>(full_pattern_));
        -:  970:}
        -:  971:
        -:  972:// Returns true if and only if regular expression re matches the entire str.
        -:  973:bool RE::FullMatch(const char* str, const RE& re) {
        -:  974:  return re.is_valid_ && MatchRegexAnywhere(re.full_pattern_, str);
        -:  975:}
        -:  976:
        -:  977:// Returns true if and only if regular expression re matches a substring of
        -:  978:// str (including str itself).
        -:  979:bool RE::PartialMatch(const char* str, const RE& re) {
        -:  980:  return re.is_valid_ && MatchRegexAnywhere(re.pattern_, str);
        -:  981:}
        -:  982:
        -:  983:// Initializes an RE from its string representation.
        -:  984:void RE::Init(const char* regex) {
        -:  985:  pattern_ = full_pattern_ = nullptr;
        -:  986:  if (regex != nullptr) {
        -:  987:    pattern_ = posix::StrDup(regex);
        -:  988:  }
        -:  989:
        -:  990:  is_valid_ = ValidateRegex(regex);
        -:  991:  if (!is_valid_) {
        -:  992:    // No need to calculate the full pattern when the regex is invalid.
        -:  993:    return;
        -:  994:  }
        -:  995:
        -:  996:  const size_t len = strlen(regex);
        -:  997:  // Reserves enough bytes to hold the regular expression used for a
        -:  998:  // full match: we need space to prepend a '^', append a '$', and
        -:  999:  // terminate the string with '\0'.
        -: 1000:  char* buffer = static_cast<char*>(malloc(len + 3));
        -: 1001:  full_pattern_ = buffer;
        -: 1002:
        -: 1003:  if (*regex != '^')
        -: 1004:    *buffer++ = '^';  // Makes sure full_pattern_ starts with '^'.
        -: 1005:
        -: 1006:  // We don't use snprintf or strncpy, as they trigger a warning when
        -: 1007:  // compiled with VC++ 8.0.
        -: 1008:  memcpy(buffer, regex, len);
        -: 1009:  buffer += len;
        -: 1010:
        -: 1011:  if (len == 0 || regex[len - 1] != '$')
        -: 1012:    *buffer++ = '$';  // Makes sure full_pattern_ ends with '$'.
        -: 1013:
        -: 1014:  *buffer = '\0';
        -: 1015:}
        -: 1016:
        -: 1017:#endif  // GTEST_USES_POSIX_RE
        -: 1018:
        -: 1019:const char kUnknownFile[] = "unknown file";
        -: 1020:
        -: 1021:// Formats a source file path and a line number as they would appear
        -: 1022:// in an error message from the compiler used to compile this code.
    #####: 1023:GTEST_API_ ::std::string FormatFileLocation(const char* file, int line) {
    #####: 1024:  const std::string file_name(file == nullptr ? kUnknownFile : file);
    %%%%%: 1024-block  0
    %%%%%: 1024-block  1
    %%%%%: 1024-block  2
    %%%%%: 1024-block  3
    %%%%%: 1024-block  4
    $$$$$: 1024-block  5
    $$$$$: 1024-block  6
        -: 1025:
    #####: 1026:  if (line < 0) {
    #####: 1027:    return file_name + ":";
    %%%%%: 1027-block  0
        -: 1028:  }
        -: 1029:#ifdef _MSC_VER
        -: 1030:  return file_name + "(" + StreamableToString(line) + "):";
        -: 1031:#else
    #####: 1032:  return file_name + ":" + StreamableToString(line) + ":";
    %%%%%: 1032-block  0
    %%%%%: 1032-block  1
    %%%%%: 1032-block  2
    %%%%%: 1032-block  3
    %%%%%: 1032-block  4
    $$$$$: 1032-block  5
    $$$$$: 1032-block  6
    $$$$$: 1032-block  7
    $$$$$: 1032-block  8
    $$$$$: 1032-block  9
    $$$$$: 1032-block 10
        -: 1033:#endif  // _MSC_VER
        -: 1034:}
        -: 1035:
        -: 1036:// Formats a file location for compiler-independent XML output.
        -: 1037:// Although this function is not platform dependent, we put it next to
        -: 1038:// FormatFileLocation in order to contrast the two functions.
        -: 1039:// Note that FormatCompilerIndependentFileLocation() does NOT append colon
        -: 1040:// to the file location it produces, unlike FormatFileLocation().
    #####: 1041:GTEST_API_ ::std::string FormatCompilerIndependentFileLocation(
        -: 1042:    const char* file, int line) {
    #####: 1043:  const std::string file_name(file == nullptr ? kUnknownFile : file);
    %%%%%: 1043-block  0
    %%%%%: 1043-block  1
    %%%%%: 1043-block  2
    %%%%%: 1043-block  3
    %%%%%: 1043-block  4
    $$$$$: 1043-block  5
    $$$$$: 1043-block  6
        -: 1044:
    #####: 1045:  if (line < 0)
    #####: 1046:    return file_name;
    %%%%%: 1046-block  0
        -: 1047:  else
    #####: 1048:    return file_name + ":" + StreamableToString(line);
    %%%%%: 1048-block  0
    %%%%%: 1048-block  1
    %%%%%: 1048-block  2
    %%%%%: 1048-block  3
    $$$$$: 1048-block  4
    $$$$$: 1048-block  5
    $$$$$: 1048-block  6
    $$$$$: 1048-block  7
        -: 1049:}
        -: 1050:
    #####: 1051:GTestLog::GTestLog(GTestLogSeverity severity, const char* file, int line)
    #####: 1052:    : severity_(severity) {
    #####: 1053:  const char* const marker =
    %%%%%: 1053-block  0
    %%%%%: 1053-block  1
    %%%%%: 1053-block  2
    %%%%%: 1053-block  3
    %%%%%: 1053-block  4
    %%%%%: 1053-block  5
    %%%%%: 1053-block  6
    %%%%%: 1053-block  7
    %%%%%: 1053-block  8
        -: 1054:      severity == GTEST_INFO ?    "[  INFO ]" :
        -: 1055:      severity == GTEST_WARNING ? "[WARNING]" :
        -: 1056:      severity == GTEST_ERROR ?   "[ ERROR ]" : "[ FATAL ]";
    #####: 1057:  GetStream() << ::std::endl << marker << " "
    %%%%%: 1057-block  0
    #####: 1058:              << FormatFileLocation(file, line).c_str() << ": ";
    %%%%%: 1058-block  0
    %%%%%: 1058-block  1
    $$$$$: 1058-block  2
    #####: 1059:}
        -: 1060:
        -: 1061:// Flushes the buffers and, if severity is GTEST_FATAL, aborts the program.
    #####: 1062:GTestLog::~GTestLog() {
    #####: 1063:  GetStream() << ::std::endl;
    %%%%%: 1063-block  0
    #####: 1064:  if (severity_ == GTEST_FATAL) {
    #####: 1065:    fflush(stderr);
    %%%%%: 1065-block  0
    #####: 1066:    posix::Abort();
        -: 1067:  }
    #####: 1068:}
        -: 1069:
        -: 1070:// Disable Microsoft deprecation warnings for POSIX functions called from
        -: 1071:// this class (creat, dup, dup2, and close)
        -: 1072:GTEST_DISABLE_MSC_DEPRECATED_PUSH_()
        -: 1073:
        -: 1074:#if GTEST_HAS_STREAM_REDIRECTION
        -: 1075:
        -: 1076:// Object that captures an output stream (stdout/stderr).
        -: 1077:class CapturedStream {
        -: 1078: public:
        -: 1079:  // The ctor redirects the stream to a temporary file.
    #####: 1080:  explicit CapturedStream(int fd) : fd_(fd), uncaptured_fd_(dup(fd)) {
    %%%%%: 1080-block  0
    $$$$$: 1080-block  1
        -: 1081:# if GTEST_OS_WINDOWS
        -: 1082:    char temp_dir_path[MAX_PATH + 1] = { '\0' };  // NOLINT
        -: 1083:    char temp_file_path[MAX_PATH + 1] = { '\0' };  // NOLINT
        -: 1084:
        -: 1085:    ::GetTempPathA(sizeof(temp_dir_path), temp_dir_path);
        -: 1086:    const UINT success = ::GetTempFileNameA(temp_dir_path,
        -: 1087:                                            "gtest_redir",
        -: 1088:                                            0,  // Generate unique file name.
        -: 1089:                                            temp_file_path);
        -: 1090:    GTEST_CHECK_(success != 0)
        -: 1091:        << "Unable to create a temporary file in " << temp_dir_path;
        -: 1092:    const int captured_fd = creat(temp_file_path, _S_IREAD | _S_IWRITE);
        -: 1093:    GTEST_CHECK_(captured_fd != -1) << "Unable to open temporary file "
        -: 1094:                                    << temp_file_path;
        -: 1095:    filename_ = temp_file_path;
        -: 1096:# else
        -: 1097:    // There's no guarantee that a test has write access to the current
        -: 1098:    // directory, so we create the temporary file in the /tmp directory
        -: 1099:    // instead. We use /tmp on most systems, and /sdcard on Android.
        -: 1100:    // That's because Android doesn't have /tmp.
        -: 1101:#  if GTEST_OS_LINUX_ANDROID
        -: 1102:    // Note: Android applications are expected to call the framework's
        -: 1103:    // Context.getExternalStorageDirectory() method through JNI to get
        -: 1104:    // the location of the world-writable SD Card directory. However,
        -: 1105:    // this requires a Context handle, which cannot be retrieved
        -: 1106:    // globally from native code. Doing so also precludes running the
        -: 1107:    // code as part of a regular standalone executable, which doesn't
        -: 1108:    // run in a Dalvik process (e.g. when running it through 'adb shell').
        -: 1109:    //
        -: 1110:    // The location /data/local/tmp is directly accessible from native code.
        -: 1111:    // '/sdcard' and other variants cannot be relied on, as they are not
        -: 1112:    // guaranteed to be mounted, or may have a delay in mounting.
        -: 1113:    char name_template[] = "/data/local/tmp/gtest_captured_stream.XXXXXX";
        -: 1114:#  else
    #####: 1115:    char name_template[] = "/tmp/captured_stream.XXXXXX";
        -: 1116:#  endif  // GTEST_OS_LINUX_ANDROID
    #####: 1117:    const int captured_fd = mkstemp(name_template);
    #####: 1118:    if (captured_fd == -1) {
    %%%%%: 1118-block  0
    #####: 1119:      GTEST_LOG_(WARNING)
    %%%%%: 1119-block  0
    %%%%%: 1119-block  1
    %%%%%: 1119-block  2
    $$$$$: 1119-block  3
    $$$$$: 1119-block  4
        -: 1120:          << "Failed to create tmp file " << name_template
    #####: 1121:          << " for test; does the test have access to the /tmp directory?";
    %%%%%: 1121-block  0
    %%%%%: 1121-block  1
        -: 1122:    }
    #####: 1123:    filename_ = name_template;
    %%%%%: 1123-block  0
        -: 1124:# endif  // GTEST_OS_WINDOWS
    #####: 1125:    fflush(nullptr);
    %%%%%: 1125-block  0
    #####: 1126:    dup2(captured_fd, fd_);
    %%%%%: 1126-block  0
    #####: 1127:    close(captured_fd);
    #####: 1128:  }
    %%%%%: 1128-block  0
        -: 1129:
    #####: 1130:  ~CapturedStream() {
    #####: 1131:    remove(filename_.c_str());
    %%%%%: 1131-block  0
    #####: 1132:  }
        -: 1133:
    #####: 1134:  std::string GetCapturedString() {
    #####: 1135:    if (uncaptured_fd_ != -1) {
    %%%%%: 1135-block  0
        -: 1136:      // Restores the original stream.
    #####: 1137:      fflush(nullptr);
    %%%%%: 1137-block  0
    #####: 1138:      dup2(uncaptured_fd_, fd_);
    #####: 1139:      close(uncaptured_fd_);
    #####: 1140:      uncaptured_fd_ = -1;
        -: 1141:    }
        -: 1142:
    #####: 1143:    FILE* const file = posix::FOpen(filename_.c_str(), "r");
    %%%%%: 1143-block  0
    #####: 1144:    if (file == nullptr) {
    #####: 1145:      GTEST_LOG_(FATAL) << "Failed to open tmp file " << filename_
    %%%%%: 1145-block  0
    %%%%%: 1145-block  1
    $$$$$: 1145-block  2
    $$$$$: 1145-block  3
    #####: 1146:                        << " for capturing stream.";
    %%%%%: 1146-block  0
    %%%%%: 1146-block  1
        -: 1147:    }
    #####: 1148:    const std::string content = ReadEntireFile(file);
    %%%%%: 1148-block  0
    #####: 1149:    posix::FClose(file);
    #####: 1150:    return content;
    %%%%%: 1150-block  0
    %%%%%: 1150-block  1
        -: 1151:  }
        -: 1152:
        -: 1153: private:
        -: 1154:  const int fd_;  // A stream to capture.
        -: 1155:  int uncaptured_fd_;
        -: 1156:  // Name of the temporary file holding the stderr output.
        -: 1157:  ::std::string filename_;
        -: 1158:
        -: 1159:  GTEST_DISALLOW_COPY_AND_ASSIGN_(CapturedStream);
        -: 1160:};
        -: 1161:
        -: 1162:GTEST_DISABLE_MSC_DEPRECATED_POP_()
        -: 1163:
        -: 1164:static CapturedStream* g_captured_stderr = nullptr;
        -: 1165:static CapturedStream* g_captured_stdout = nullptr;
        -: 1166:
        -: 1167:// Starts capturing an output stream (stdout/stderr).
    #####: 1168:static void CaptureStream(int fd, const char* stream_name,
        -: 1169:                          CapturedStream** stream) {
    #####: 1170:  if (*stream != nullptr) {
    %%%%%: 1170-block  0
    #####: 1171:    GTEST_LOG_(FATAL) << "Only one " << stream_name
    %%%%%: 1171-block  0
    %%%%%: 1171-block  1
    $$$$$: 1171-block  2
    $$$$$: 1171-block  3
    #####: 1172:                      << " capturer can exist at a time.";
    %%%%%: 1172-block  0
    %%%%%: 1172-block  1
        -: 1173:  }
    #####: 1174:  *stream = new CapturedStream(fd);
    %%%%%: 1174-block  0
    $$$$$: 1174-block  1
    #####: 1175:}
    %%%%%: 1175-block  0
        -: 1176:
        -: 1177:// Stops capturing the output stream and returns the captured string.
    #####: 1178:static std::string GetCapturedStream(CapturedStream** captured_stream) {
    #####: 1179:  const std::string content = (*captured_stream)->GetCapturedString();
    %%%%%: 1179-block  0
        -: 1180:
    #####: 1181:  delete *captured_stream;
    %%%%%: 1181-block  0
    #####: 1182:  *captured_stream = nullptr;
        -: 1183:
    #####: 1184:  return content;
    %%%%%: 1184-block  0
        -: 1185:}
        -: 1186:
        -: 1187:// Starts capturing stdout.
    #####: 1188:void CaptureStdout() {
    #####: 1189:  CaptureStream(kStdOutFileno, "stdout", &g_captured_stdout);
    %%%%%: 1189-block  0
    #####: 1190:}
        -: 1191:
        -: 1192:// Starts capturing stderr.
    #####: 1193:void CaptureStderr() {
    #####: 1194:  CaptureStream(kStdErrFileno, "stderr", &g_captured_stderr);
    %%%%%: 1194-block  0
    #####: 1195:}
        -: 1196:
        -: 1197:// Stops capturing stdout and returns the captured string.
    #####: 1198:std::string GetCapturedStdout() {
    #####: 1199:  return GetCapturedStream(&g_captured_stdout);
    %%%%%: 1199-block  0
        -: 1200:}
        -: 1201:
        -: 1202:// Stops capturing stderr and returns the captured string.
    #####: 1203:std::string GetCapturedStderr() {
    #####: 1204:  return GetCapturedStream(&g_captured_stderr);
    %%%%%: 1204-block  0
        -: 1205:}
        -: 1206:
        -: 1207:#endif  // GTEST_HAS_STREAM_REDIRECTION
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:
        -: 1212:
    #####: 1213:size_t GetFileSize(FILE* file) {
    #####: 1214:  fseek(file, 0, SEEK_END);
    %%%%%: 1214-block  0
    #####: 1215:  return static_cast<size_t>(ftell(file));
        -: 1216:}
        -: 1217:
    #####: 1218:std::string ReadEntireFile(FILE* file) {
    #####: 1219:  const size_t file_size = GetFileSize(file);
    %%%%%: 1219-block  0
    #####: 1220:  char* const buffer = new char[file_size];
        -: 1221:
    #####: 1222:  size_t bytes_last_read = 0;  // # of bytes read in the last fread()
    #####: 1223:  size_t bytes_read = 0;       // # of bytes read so far
        -: 1224:
    #####: 1225:  fseek(file, 0, SEEK_SET);
        -: 1226:
        -: 1227:  // Keeps reading the file until we cannot read further or the
        -: 1228:  // pre-determined file size is reached.
    #####: 1229:  do {
    %%%%%: 1229-block  0
    #####: 1230:    bytes_last_read = fread(buffer+bytes_read, 1, file_size-bytes_read, file);
    %%%%%: 1230-block  0
    #####: 1231:    bytes_read += bytes_last_read;
    #####: 1232:  } while (bytes_last_read > 0 && bytes_read < file_size);
    %%%%%: 1232-block  0
        -: 1233:
    #####: 1234:  const std::string content(buffer, bytes_read);
    %%%%%: 1234-block  0
    #####: 1235:  delete[] buffer;
    %%%%%: 1235-block  0
        -: 1236:
    #####: 1237:  return content;
    %%%%%: 1237-block  0
    %%%%%: 1237-block  1
        -: 1238:}
        -: 1239:
        -: 1240:#if GTEST_HAS_DEATH_TEST
        -: 1241:static const std::vector<std::string>* g_injected_test_argvs =
        -: 1242:    nullptr;  // Owned.
        -: 1243:
    #####: 1244:std::vector<std::string> GetInjectableArgvs() {
    #####: 1245:  if (g_injected_test_argvs != nullptr) {
    %%%%%: 1245-block  0
    #####: 1246:    return *g_injected_test_argvs;
    %%%%%: 1246-block  0
        -: 1247:  }
    #####: 1248:  return GetArgvs();
    %%%%%: 1248-block  0
        -: 1249:}
        -: 1250:
    #####: 1251:void SetInjectableArgvs(const std::vector<std::string>* new_argvs) {
    #####: 1252:  if (g_injected_test_argvs != new_argvs) delete g_injected_test_argvs;
    %%%%%: 1252-block  0
    %%%%%: 1252-block  1
    %%%%%: 1252-block  2
    #####: 1253:  g_injected_test_argvs = new_argvs;
    #####: 1254:}
        -: 1255:
    #####: 1256:void SetInjectableArgvs(const std::vector<std::string>& new_argvs) {
    #####: 1257:  SetInjectableArgvs(
    %%%%%: 1257-block  0
    $$$$$: 1257-block  1
    $$$$$: 1257-block  2
    #####: 1258:      new std::vector<std::string>(new_argvs.begin(), new_argvs.end()));
    %%%%%: 1258-block  0
    %%%%%: 1258-block  1
    $$$$$: 1258-block  2
    $$$$$: 1258-block  3
    #####: 1259:}
        -: 1260:
    #####: 1261:void ClearInjectableArgvs() {
    #####: 1262:  delete g_injected_test_argvs;
    %%%%%: 1262-block  0
    %%%%%: 1262-block  1
    #####: 1263:  g_injected_test_argvs = nullptr;
    #####: 1264:}
        -: 1265:#endif  // GTEST_HAS_DEATH_TEST
        -: 1266:
        -: 1267:#if GTEST_OS_WINDOWS_MOBILE
        -: 1268:namespace posix {
        -: 1269:void Abort() {
        -: 1270:  DebugBreak();
        -: 1271:  TerminateProcess(GetCurrentProcess(), 1);
        -: 1272:}
        -: 1273:}  // namespace posix
        -: 1274:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1275:
        -: 1276:// Returns the name of the environment variable corresponding to the
        -: 1277:// given flag.  For example, FlagToEnvVar("foo") will return
        -: 1278:// "GTEST_FOO" in the open-source version.
       20: 1279:static std::string FlagToEnvVar(const char* flag) {
        -: 1280:  const std::string full_flag =
       40: 1281:      (Message() << GTEST_FLAG_PREFIX_ << flag).GetString();
       20: 1281-block  0
       20: 1281-block  1
       20: 1281-block  2
       20: 1281-block  3
    $$$$$: 1281-block  4
    $$$$$: 1281-block  5
        -: 1282:
       40: 1283:  Message env_var;
       20: 1283-block  0
    $$$$$: 1283-block  1
      392: 1284:  for (size_t i = 0; i != full_flag.length(); i++) {
       20: 1284-block  0
      392: 1284-block  1
      372: 1285:    env_var << ToUpper(full_flag.c_str()[i]);
      372: 1285-block  0
      372: 1285-block  1
    $$$$$: 1285-block  2
        -: 1286:  }
        -: 1287:
       40: 1288:  return env_var.GetString();
       20: 1288-block  0
       20: 1288-block  1
        -: 1289:}
        -: 1290:
        -: 1291:// Parses 'str' for a 32-bit signed integer.  If successful, writes
        -: 1292:// the result to *value and returns true; otherwise leaves *value
        -: 1293:// unchanged and returns false.
    #####: 1294:bool ParseInt32(const Message& src_text, const char* str, int32_t* value) {
        -: 1295:  // Parses the environment variable as a decimal integer.
    #####: 1296:  char* end = nullptr;
    #####: 1297:  const long long_value = strtol(str, &end, 10);  // NOLINT
    %%%%%: 1297-block  0
        -: 1298:
        -: 1299:  // Has strtol() consumed all characters in the string?
    #####: 1300:  if (*end != '\0') {
        -: 1301:    // No - an invalid character was encountered.
    #####: 1302:    Message msg;
    %%%%%: 1302-block  0
    $$$$$: 1302-block  1
    #####: 1303:    msg << "WARNING: " << src_text
    %%%%%: 1303-block  0
    %%%%%: 1303-block  1
    #####: 1304:        << " is expected to be a 32-bit integer, but actually"
    %%%%%: 1304-block  0
    #####: 1305:        << " has value \"" << str << "\".\n";
    %%%%%: 1305-block  0
    %%%%%: 1305-block  1
    %%%%%: 1305-block  2
    #####: 1306:    printf("%s", msg.GetString().c_str());
    %%%%%: 1306-block  0
    %%%%%: 1306-block  1
    %%%%%: 1306-block  2
    $$$$$: 1306-block  3
    $$$$$: 1306-block  4
    #####: 1307:    fflush(stdout);
    #####: 1308:    return false;
    %%%%%: 1308-block  0
        -: 1309:  }
        -: 1310:
        -: 1311:  // Is the parsed value in the range of an int32_t?
    #####: 1312:  const auto result = static_cast<int32_t>(long_value);
    #####: 1313:  if (long_value == LONG_MAX || long_value == LONG_MIN ||
    %%%%%: 1313-block  0
    %%%%%: 1313-block  1
        -: 1314:      // The parsed value overflows as a long.  (strtol() returns
        -: 1315:      // LONG_MAX or LONG_MIN when the input overflows.)
    #####: 1316:      result != long_value
    %%%%%: 1316-block  0
        -: 1317:      // The parsed value overflows as an int32_t.
        -: 1318:      ) {
    #####: 1319:    Message msg;
    %%%%%: 1319-block  0
    $$$$$: 1319-block  1
    #####: 1320:    msg << "WARNING: " << src_text
    %%%%%: 1320-block  0
    %%%%%: 1320-block  1
    #####: 1321:        << " is expected to be a 32-bit integer, but actually"
    %%%%%: 1321-block  0
    #####: 1322:        << " has value " << str << ", which overflows.\n";
    %%%%%: 1322-block  0
    %%%%%: 1322-block  1
    %%%%%: 1322-block  2
    #####: 1323:    printf("%s", msg.GetString().c_str());
    %%%%%: 1323-block  0
    %%%%%: 1323-block  1
    %%%%%: 1323-block  2
    $$$$$: 1323-block  3
    $$$$$: 1323-block  4
    #####: 1324:    fflush(stdout);
    #####: 1325:    return false;
    %%%%%: 1325-block  0
        -: 1326:  }
        -: 1327:
    #####: 1328:  *value = result;
    #####: 1329:  return true;
    %%%%%: 1329-block  0
        -: 1330:}
        -: 1331:
        -: 1332:// Reads and returns the Boolean environment variable corresponding to
        -: 1333:// the given flag; if it's not set, returns default_value.
        -: 1334://
        -: 1335:// The value is considered true if and only if it's not "0".
       11: 1336:bool BoolFromGTestEnv(const char* flag, bool default_value) {
        -: 1337:#if defined(GTEST_GET_BOOL_FROM_ENV_)
        -: 1338:  return GTEST_GET_BOOL_FROM_ENV_(flag, default_value);
        -: 1339:#else
       11: 1340:  const std::string env_var = FlagToEnvVar(flag);
       11: 1340-block  0
       11: 1341:  const char* const string_value = posix::GetEnv(env_var.c_str());
       11: 1341-block  0
      11*: 1342:  return string_value == nullptr ? default_value
      22*: 1343:                                 : strcmp(string_value, "0") != 0;
       11: 1343-block  0
    %%%%%: 1343-block  1
       11: 1343-block  2
       11: 1343-block  3
        -: 1344:#endif  // defined(GTEST_GET_BOOL_FROM_ENV_)
        -: 1345:}
        -: 1346:
        -: 1347:// Reads and returns a 32-bit integer stored in the environment
        -: 1348:// variable corresponding to the given flag; if it isn't set or
        -: 1349:// doesn't represent a valid 32-bit integer, returns default_value.
        3: 1350:int32_t Int32FromGTestEnv(const char* flag, int32_t default_value) {
        -: 1351:#if defined(GTEST_GET_INT32_FROM_ENV_)
        -: 1352:  return GTEST_GET_INT32_FROM_ENV_(flag, default_value);
        -: 1353:#else
        6: 1354:  const std::string env_var = FlagToEnvVar(flag);
        3: 1354-block  0
        3: 1354-block  1
    $$$$$: 1354-block  2
        3: 1355:  const char* const string_value = posix::GetEnv(env_var.c_str());
        3: 1355-block  0
        3: 1356:  if (string_value == nullptr) {
        -: 1357:    // The environment variable is not set.
        3: 1358:    return default_value;
        3: 1358-block  0
        -: 1359:  }
        -: 1360:
    #####: 1361:  int32_t result = default_value;
    #####: 1362:  if (!ParseInt32(Message() << "Environment variable " << env_var,
    %%%%%: 1362-block  0
    %%%%%: 1362-block  1
    %%%%%: 1362-block  2
    %%%%%: 1362-block  3
    %%%%%: 1362-block  4
    $$$$$: 1362-block  5
    $$$$$: 1362-block  6
        -: 1363:                  string_value, &result)) {
    #####: 1364:    printf("The default value %s is used.\n",
    %%%%%: 1364-block  0
    #####: 1365:           (Message() << default_value).GetString().c_str());
    %%%%%: 1365-block  0
    %%%%%: 1365-block  1
    %%%%%: 1365-block  2
    %%%%%: 1365-block  3
    $$$$$: 1365-block  4
    $$$$$: 1365-block  5
    $$$$$: 1365-block  6
    $$$$$: 1365-block  7
    #####: 1366:    fflush(stdout);
    #####: 1367:    return default_value;
    %%%%%: 1367-block  0
        -: 1368:  }
        -: 1369:
    #####: 1370:  return result;
    %%%%%: 1370-block  0
        -: 1371:#endif  // defined(GTEST_GET_INT32_FROM_ENV_)
        -: 1372:}
        -: 1373:
        -: 1374:// As a special case for the 'output' flag, if GTEST_OUTPUT is not
        -: 1375:// set, we look for XML_OUTPUT_FILE, which is set by the Bazel build
        -: 1376:// system.  The value of XML_OUTPUT_FILE is a filename without the
        -: 1377:// "xml:" prefix of GTEST_OUTPUT.
        -: 1378:// Note that this is meant to be called at the call site so it does
        -: 1379:// not check that the flag is 'output'
        -: 1380:// In essence this checks an env variable called XML_OUTPUT_FILE
        -: 1381:// and if it is set we prepend "xml:" to its value, if it not set we return ""
        1: 1382:std::string OutputFlagAlsoCheckEnvVar(){
        1: 1383:  std::string default_value_for_output_flag = "";
        1: 1383-block  0
    $$$$$: 1383-block  1
        1: 1384:  const char* xml_output_file_env = posix::GetEnv("XML_OUTPUT_FILE");
        1: 1385:  if (nullptr != xml_output_file_env) {
    #####: 1386:    default_value_for_output_flag = std::string("xml:") + xml_output_file_env;
    %%%%%: 1386-block  0
    %%%%%: 1386-block  1
    %%%%%: 1386-block  2
    $$$$$: 1386-block  3
    $$$$$: 1386-block  4
    $$$$$: 1386-block  5
    $$$$$: 1386-block  6
        -: 1387:  }
        1: 1388:  return default_value_for_output_flag;
        1: 1388-block  0
        1: 1388-block  1
        -: 1389:}
        -: 1390:
        -: 1391:// Reads and returns the string environment variable corresponding to
        -: 1392:// the given flag; if it's not set, returns default_value.
        6: 1393:const char* StringFromGTestEnv(const char* flag, const char* default_value) {
        -: 1394:#if defined(GTEST_GET_STRING_FROM_ENV_)
        -: 1395:  return GTEST_GET_STRING_FROM_ENV_(flag, default_value);
        -: 1396:#else
        6: 1397:  const std::string env_var = FlagToEnvVar(flag);
        6: 1397-block  0
        6: 1398:  const char* const value = posix::GetEnv(env_var.c_str());
        6: 1398-block  0
      12*: 1399:  return value == nullptr ? default_value : value;
        6: 1399-block  0
    %%%%%: 1399-block  1
        6: 1399-block  2
        6: 1399-block  3
        -: 1400:#endif  // defined(GTEST_GET_STRING_FROM_ENV_)
        -: 1401:}
        -: 1402:
        -: 1403:}  // namespace internal
        -: 1404:}  // namespace testing
